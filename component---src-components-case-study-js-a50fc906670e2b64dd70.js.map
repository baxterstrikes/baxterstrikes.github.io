{"version":3,"sources":["webpack:///./src/components/case_study/overview.js","webpack:///./src/components/case_study/section.js","webpack:///./src/components/case-study.js"],"names":["AtAGlance","title","lis","items","map","item","i","className","key","ProblemStatement","problem","solution","Overview","overview","images","image","length","style","scrollSnapAlign","loading","fadeIn","fluid","childImageSharp","scrollSnapType","areasOfFocus","importantDetails","Title","content","boldMatcher","MarkBolded","line","split","pre","b","post","Introduction","body","paragraph","Arrow","width","height","viewBox","fill","xmlns","d","Changes","changes","from","to","OrderedList","Lists","lists","itemSet","j","HorizontalImageExhibition","rows","summary","summaryTitle","ImageExhibition","imageRows","row","LightBulb","KeyInsights","insightSet","insights","Barrier","Bell","Clipboard","SpeechBubble","IdentifyIssues","issuesSet","issues","icon","prompt","ProcessionalGuide","Section","contents","section","type","pageQuery","CaseStudy","data","pageContext","caseStudy","allContentYaml","edges","edge","node","sections","next","path","text"],"mappings":"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","file":"component---src-components-case-study-js-a50fc906670e2b64dd70.js","sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby'\nimport Img from 'gatsby-image'\n\nconst AtAGlance = ({ title, items }) => {\n    const lis = items.map((item, i) =>\n        <li\n            className=\"my-4 sm:mr-8\"\n            key={title + i}>\n            {item}\n        </li>\n    )\n    return (\n        <div className=\"sm:w-1/2\">\n            <h4 className=\"sm:mt-4 mt-8 mb-4\">{title}</h4>\n            <ul>\n                {lis}\n            </ul>\n        </div>\n    )\n}\n\nconst ProblemStatement = ({ problem, solution }) =>\n    <>\n        <div className=\"mt-8 mb-4 text-B1 sm:mx-auto sm:w-2/3\">\n            <div className=\"inline font-bold\">Problem: </div>\n            <p className=\"inline\">{problem}</p>\n        </div>\n        <div className=\"mt-8 mb-4 text-B1 sm:mx-auto sm:w-2/3\">\n            <div className=\"inline font-bold\">Solution: </div>\n            <p className=\"inline\">{solution}</p>\n        </div>\n    </>\n\nconst Overview = ({ overview, title }) => {\n    const carouselyCSS = \"sm:w-1/4 sm:pr-8 sm:pl-0 sm:pb-0 w-3/4 pr-4 mb-4 flex-shrink-0\";\n    const images = overview.image.map((image, i) =>\n        <div\n            key={i}\n            className={overview.image.length > 1 ? carouselyCSS : \"w-full\"}\n            style={{ scrollSnapAlign: \"start\" }}>\n            <Img\n                loading=\"eager\"\n                fadeIn={false}\n                fluid={image.childImageSharp.fluid} />\n        </div>\n    )\n\n    return (\n        <>\n            <div\n                className=\"mt-8 mb-0 flex w-full h-full overflow-x-scroll sm:overflow-x-hidden\"\n                style={{ scrollSnapType: \"x mandatory\" }}>\n                {images}\n            </div>\n\n            <h1 className=\"sm:mx-auto sm:w-2/3 my-4\">{title}</h1>\n\n            <div className=\"sm:flex sm:mx-auto sm:w-2/3\">\n                <AtAGlance\n                    title=\"Areas of Focus\"\n                    items={overview.areasOfFocus} />\n\n                <AtAGlance\n                    title=\"Important Details\"\n                    items={overview.importantDetails} />\n\n            </div>\n\n            <ProblemStatement\n                problem={overview.problem}\n                solution={overview.solution} />\n        </>\n    )\n}\n\nexport const overviewFragment = graphql`\n  fragment Overview on ContentYaml {\n    overview {\n        image {\n            childImageSharp {\n                fluid(maxWidth: 1280) {\n                    ...GatsbyImageSharpFluid\n                }\n                fixed(width: 200) {\n                    ...GatsbyImageSharpFixed\n                }\n            }\n        }\n        areasOfFocus\n        importantDetails\n        problem\n        solution\n      }\n  }\n`\n\nexport default Overview\n","import React from 'react'\nimport { graphql } from 'gatsby'\nimport Img from 'gatsby-image'\n\nconst Title = ({ content }) => (\n    <h2 className=\"mt-16 mb-8 sm:mx-auto sm:w-2/3\">{content.title}</h2>\n)\n\nconst boldMatcher = /\\*\\*(.+)\\*\\*/gi;\n\nconst MarkBolded = ({ content }) =>\n    (content || []).map((line, i) => {\n        const [pre, b, post] = line.split(boldMatcher);\n        return (\n            <span key={i}>\n                {pre}\n                <strong>{b}</strong>\n                {post}\n            </span>\n        )\n    }\n    )\n\nconst Introduction = ({ content }) => {\n    const { body } = content;\n\n    return body.map((paragraph, i) =>\n        <p key={\"intros-\" + i} className=\"my-4 sm:mx-auto sm:w-2/3\">\n            <MarkBolded content={[paragraph]} />\n        </p>\n    );\n}\n\nconst Arrow = ({ width }) =>\n    <svg width={width || \"74\"} height=\"16\" viewBox=\"0 0 74 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M73.7071 8.70711C74.0976 8.31658 74.0976 7.68342 73.7071 7.29289L67.3431 0.928932C66.9526 0.538408 66.3195 0.538408 65.9289 0.928932C65.5384 1.31946 65.5384 1.95262 65.9289 2.34315L71.5858 8L65.9289 13.6569C65.5384 14.0474 65.5384 14.6805 65.9289 15.0711C66.3195 15.4616 66.9526 15.4616 67.3431 15.0711L73.7071 8.70711ZM0 9H73V7H0V9Z\" fill=\"#272B2A\" />\n    </svg>\n\nconst Changes = ({ content }) => {\n    const changes = content.changes.map(({ from, to }, i) =>\n        <div key={i} className=\"flex justify-between py-8 flex-col sm:flex-row\">\n            <div className=\"sm:w-5/12\"><MarkBolded content={[from]} /></div>\n            <div className=\"self-center sm:py-4 py-8\">\n                <span className=\"block sm:hidden transform rotate-90\"><Arrow width=\"52\" /></span>\n                <span className=\"hidden sm:block transform sm:rotate-0\"><Arrow width=\"74\" /></span>\n            </div>\n            <div className=\"sm:w-5/12\"><MarkBolded content={[to]} /></div>\n        </div>\n    )\n\n    return (\n        <div className=\"my-8 sm:mx-auto sm:w-2/3\">\n            <h3 className=\"mt-16 mb-8\">{content.title}</h3>\n            <div>\n                {changes}\n            </div>\n        </div>\n    )\n}\n\nconst OrderedList = ({ content }) => {\n    const items = content.items.map((item, i) =>\n        <li key={\"items-\" + i} className=\"ml-6 my-4 list-decimal\">{item}</li>\n    )\n\n    return (\n        <div className=\"my-8 sm:mx-auto sm:w-2/3\">\n            <h4>{content.title}</h4>\n            <ol>{items}</ol>\n        </div>\n    )\n}\n\nconst Lists = ({ content }) => {\n    const lists = content.lists.map(({ title, items }, i) => {\n        const itemSet = items.map((item, j) =>\n            <li key={\"items-\" + j} className=\"my-4 sm:w-2/3\">{item}</li>\n        )\n        return (\n            <div key={i} className=\"sm:w-1/2\">\n                <h4>{title}</h4>\n                <ul>{itemSet}</ul>\n            </div>\n        )\n    })\n\n    return (\n        <div className=\"my-8 sm:flex sm:mx-auto sm:w-2/3\">\n            {lists}\n        </div>\n    )\n}\n\nconst HorizontalImageExhibition = ({ content }) => {\n    const { title, rows, summary } = content;\n    const [summaryTitle, ...items] = summary;\n\n    return (\n        <div className=\"my-8\">\n            <h3 className=\"mt-16 mb-8\"> {title}</h3>\n            <div className=\"sm:flex sm:justify-between\">\n                <div className=\"sm:w-1/2 sm:flex sm:justify-center\">\n                    <div className=\"sm:w-1/2 sm:pr-8\">\n                        <Img fluid={rows[0].images[0].childImageSharp.fluid} className=\"border rounded-lg\" />\n                    </div>\n                </div>\n                <div className=\"sm:w-1/2 flex flex-col sm:justify-center\">\n                    <h3 className=\"my-4\">{summaryTitle}</h3>\n                    <ul>\n                        {items.map((line, i) => <li className=\"my-4\" key={i}><MarkBolded content={[line]} /></li>)}\n                    </ul>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst ImageExhibition = ({ content }) => {\n    const { title, rows, summary } = content;\n    var imageRows = (rows || []).map((row, i) => {\n        return (\n            <div\n                key={\"image-row\" + i}\n                style={{ scrollSnapType: \"x mandatory\" }}\n                className=\"my-8 flex w-full h-full overflow-x-scroll sm:overflow-x-hidden sm:justify-center\">\n                {\n                    (row.images || []).map((image, j) => {\n                        const carouselyCSS = \"sm:w-1/4 sm:pr-8 sm:pl-0 sm:pb-0 w-3/4 pr-4 mb-4 flex-shrink-0\";\n                        return (\n                            // <Img key={\"images-\" + i} fluid={image.childImageSharp.fluid} />\n                            <div\n                                key={\"images-\" + i + \";\" + j}\n                                style={{ scrollSnapAlign: \"start\" }}\n                                className={row.images.length > 1 ? carouselyCSS : \"w-full\"}>\n                                <Img fluid={image.childImageSharp.fluid} className=\"border rounded-lg\" />\n                            </div>\n                        )\n                    })\n                }\n            </div>\n        )\n    });\n\n    return (\n        <div className=\"my-8\">\n            <h3 className=\"mt-16 mb-8 sm:mx-auto sm:w-2/3\">{title}</h3>\n\n            {imageRows}\n\n            <p className=\"my-4 sm:mx-auto sm:w-2/3\">\n                <MarkBolded content={summary} />\n            </p>\n        </div>\n    )\n}\n\nconst LightBulb = () =>\n    <svg viewBox=\"0 0 86 86\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M43.0653 18.5366C30.8932 18.5366 20.9487 28.4811 20.9487 40.6532C20.9487 47.0177 23.7332 53.1435 28.427 57.2804C31.9275 60.7808 31.6092 68.2591 31.5297 68.3387C31.5297 68.7364 31.6092 69.0547 31.9275 69.3729C32.1661 69.6115 32.5639 69.7707 32.8821 69.7707H53.1689C53.5667 69.7707 53.8849 69.6115 54.1236 69.3729C54.3622 69.1342 54.5213 68.7364 54.5213 68.3387C54.5213 68.2591 54.1236 60.7808 57.624 57.2804C57.7036 57.2008 57.7831 57.1213 57.8627 57.0417C62.4769 52.8252 65.1818 46.8585 65.1818 40.6532C65.1818 28.4811 55.2374 18.5366 43.0653 18.5366ZM55.7942 55.2119C55.7147 55.2915 55.5556 55.4506 55.5556 55.5301C52.4529 58.8715 51.896 64.3609 51.8164 66.9862H34.2346C34.155 64.3609 33.5981 58.6328 30.2568 55.2119C26.0403 51.5523 23.5741 46.2221 23.5741 40.5736C23.5741 29.8336 32.2457 21.162 42.9857 21.162C53.7258 21.162 62.3974 29.8336 62.3974 40.5736C62.3974 46.2221 60.0107 51.5523 55.7942 55.2119Z\" fill=\"#272B2A\" />\n        <path d=\"M42.9858 24.1851C42.2697 24.1851 41.6333 24.8215 41.6333 25.5375C41.6333 26.2535 42.2697 26.89 42.9858 26.89C51.0209 26.89 57.4649 33.4135 57.4649 41.3691C57.4649 42.0851 58.1014 42.7216 58.8174 42.7216C59.5334 42.7216 60.1698 42.0851 60.1698 41.3691C60.2494 31.902 52.5325 24.1851 42.9858 24.1851Z\" fill=\"#272B2A\" />\n        <path d=\"M51.8165 71.2822H34.1551C32.3253 71.2822 30.8137 72.7938 30.8137 74.6236C30.8137 76.4534 32.3253 77.9649 34.1551 77.9649H51.7369C53.6463 77.8854 55.1578 76.4534 55.1578 74.6236C55.1578 72.7938 53.6463 71.2822 51.8165 71.2822ZM51.8165 75.1805H34.1551C33.8368 75.1805 33.5186 74.9418 33.5186 74.544C33.5186 74.1462 33.7573 73.9076 34.1551 73.9076H51.7369C52.0552 73.9076 52.3734 74.1462 52.3734 74.544C52.3734 74.9418 52.1347 75.1805 51.8165 75.1805Z\" fill=\"#272B2A\" />\n        <path d=\"M49.191 79.3174H36.7803C34.9505 79.3174 33.439 80.829 33.439 82.6587C33.439 84.4885 34.9505 86.0001 36.7803 86.0001H49.191C51.0208 86.0001 52.5324 84.4885 52.5324 82.6587C52.5324 80.7494 51.0208 79.3174 49.191 79.3174ZM49.191 83.2156H36.7803C36.4621 83.2156 36.1439 82.977 36.1439 82.5792C36.1439 82.1814 36.3825 81.9427 36.7803 81.9427H49.191C49.5093 81.9427 49.8275 82.1814 49.8275 82.5792C49.8275 82.977 49.5093 83.2156 49.191 83.2156Z\" fill=\"#272B2A\" />\n        <path d=\"M42.9857 11.9334C43.7813 11.9334 44.3382 11.2969 44.3382 10.5809V1.35245C44.3382 0.636448 43.7017 0 42.9857 0C42.2697 0 41.6333 0.636448 41.6333 1.35245V10.5809C41.6333 11.2969 42.2697 11.9334 42.9857 11.9334Z\" fill=\"#272B2A\" />\n        <path d=\"M65.5002 6.84187C64.8637 6.36454 64.0682 6.6032 63.6704 7.16009L58.5788 14.7975C58.1015 15.4339 58.2606 16.309 58.897 16.7068C59.1357 16.8659 59.3744 16.9455 59.613 16.9455C60.0904 16.9455 60.4882 16.7068 60.7268 16.309L65.8184 8.67166C66.2957 8.11477 66.1366 7.23965 65.5002 6.84187Z\" fill=\"#272B2A\" />\n        <path d=\"M26.8358 16.627C27.0745 16.627 27.3132 16.5475 27.5518 16.3884C28.1883 15.9906 28.3474 15.1155 27.9496 14.479L23.0172 6.76211C22.6194 6.12566 21.7443 5.96655 21.1078 6.36433C20.4714 6.76211 20.3123 7.63722 20.71 8.27367L25.6425 15.9906C25.9607 16.4679 26.3585 16.627 26.8358 16.627Z\" fill=\"#272B2A\" />\n        <path d=\"M17.2096 25.0604L9.17449 20.6848C8.53804 20.3665 7.66292 20.6052 7.3447 21.2417C6.94692 21.8781 7.18559 22.7532 7.90159 23.0715L15.9367 27.447C16.1754 27.5266 16.3345 27.6061 16.5732 27.6061C17.0505 27.6061 17.5279 27.3675 17.7665 26.8901C18.0848 26.2537 17.8461 25.3786 17.2096 25.0604Z\" fill=\"#272B2A\" />\n        <path d=\"M78.7064 21.2417C78.3882 20.6052 77.5131 20.3665 76.8766 20.6848L68.7619 25.0604C68.1255 25.3786 67.8868 26.2537 68.205 26.8901C68.4437 27.3675 68.921 27.6061 69.3984 27.6061C69.637 27.6061 69.8757 27.5266 70.0348 27.447L78.1495 23.0715C78.786 22.7532 79.0247 21.8781 78.7064 21.2417Z\" fill=\"#272B2A\" />\n    </svg>\n\n\nconst KeyInsights = ({ content }) => {\n    const { title, insights } = content;\n\n    const insightSet = insights.map(({ title, body }, i) => (\n        <div key={\"insights-\" + i}>\n            <h4 className=\"mb-4 mt-8\">{title}</h4>\n            <p className=\"my-4\">{body}</p>\n        </div>\n    ))\n\n    return (\n        <div className={title ? \"mt-16 mb-8\" : \"my-8\"}>\n            <div className=\"sm:flex sm:flex-wrap sm:items-center sm:justify-end\">\n                <div className=\"hidden sm:block sm:w-1/6\"></div>\n                <div className=\"my-4 w-3/12 m-auto sm:w-1/6 sm:p-8 sm:order-3\">\n                    { title && <LightBulb /> }\n                </div>\n                <div className=\"sm:w-2/3\">\n                    {title && <h3 className=\"my-4\">{title}</h3>}\n                    <div className=\"my-4\">{insightSet}</div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst Barrier = () =>\n    <svg width=\"67\" height=\"67\" viewBox=\"0 0 67 67\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M66.0186 29.4434C66.5607 29.4434 67 29.0039 67 28.4619V12.7588C67 12.2168 66.5607 11.7773 66.0186 11.7773H0.981445C0.439295 11.7773 0 12.2168 0 12.7588V28.4613C0 28.494 0.00170117 28.5266 0.0048418 28.5591C0.00615039 28.5724 0.00863672 28.5852 0.0104687 28.5983C0.0130859 28.617 0.0153105 28.6356 0.0189746 28.6541C0.0219844 28.6697 0.0263027 28.6848 0.0300977 28.6999C0.0340234 28.7158 0.0375566 28.7316 0.0422676 28.7473C0.0468477 28.7624 0.0524746 28.7769 0.057709 28.7915C0.0632051 28.8071 0.0684395 28.8227 0.0747207 28.838C0.0804785 28.8517 0.0871523 28.865 0.0934336 28.8784C0.100762 28.894 0.107697 28.9097 0.115811 28.925C0.122746 28.938 0.130598 28.9501 0.138057 28.9627C0.146955 28.9776 0.155461 28.9927 0.165145 29.0073C0.174305 29.0211 0.184512 29.0339 0.194457 29.0471C0.203748 29.0595 0.212385 29.0722 0.22233 29.0843C0.241436 29.1074 0.261719 29.1297 0.282787 29.1511C0.284357 29.1527 0.285666 29.1544 0.287236 29.1561C0.312885 29.1812 0.335523 29.2018 0.359209 29.2212C0.370201 29.2302 0.381848 29.238 0.393102 29.2465C0.407496 29.2574 0.421498 29.2684 0.436547 29.2785C0.449895 29.2875 0.463766 29.2952 0.477506 29.3033C0.491246 29.3116 0.504725 29.3202 0.518857 29.3278C0.532859 29.3353 0.547385 29.3417 0.561779 29.3485C0.576436 29.3554 0.59083 29.3627 0.605879 29.3689C0.619881 29.3747 0.634275 29.3794 0.648539 29.3845C0.664504 29.3902 0.680207 29.3964 0.696434 29.4012C0.710828 29.4055 0.725353 29.4087 0.739879 29.4123C0.756367 29.4165 0.772725 29.4211 0.789475 29.4245C0.806355 29.4279 0.823367 29.4299 0.840379 29.4322C0.855035 29.4343 0.869561 29.4372 0.884348 29.4386C0.916801 29.4417 0.949123 29.4434 0.981445 29.4434H5.88867V31.4062H0.981445C0.439295 31.4062 0 31.8457 0 32.3877V48.0908C0 48.6328 0.439295 49.0723 0.981445 49.0723H5.88867V66.0186C5.88867 66.5606 6.32797 67 6.87012 67H10.7959C11.338 67 11.7773 66.5606 11.7773 66.0186V52.0166C11.7773 51.4746 11.338 51.0352 10.7959 51.0352C10.2537 51.0352 9.81445 51.4746 9.81445 52.0166V65.0371H7.85156V49.0723H59.1484V65.0371H57.1855V52.0166C57.1855 51.4746 56.7463 51.0352 56.2041 51.0352C55.662 51.0352 55.2227 51.4746 55.2227 52.0166V66.0186C55.2227 66.5606 55.662 67 56.2041 67H60.1299C60.672 67 61.1113 66.5606 61.1113 66.0186V49.0723H66.0186C66.5607 49.0723 67 48.6328 67 48.0908V32.3877C67 31.8457 66.5607 31.4062 66.0186 31.4062H61.1113V29.4434H66.0186ZM52.6849 27.4805L65.0371 15.1283V27.4805H52.6849ZM63.6491 33.3691L49.9089 47.1094H36.2402L49.9804 33.3691H63.6491ZM19.7956 47.1094L33.5359 33.3691H47.2044L33.4641 47.1094H19.7956ZM3.35092 47.1094L17.0912 33.3691H30.7598L17.0196 47.1094H3.35092ZM11.7773 31.4062V29.4434H55.2227V31.4062H11.7773ZM3.35092 27.4805L17.0912 13.7402H30.7598L17.0196 27.4805H3.35092ZM47.2044 13.7402L33.4641 27.4805H19.7956L33.5359 13.7402H47.2044ZM63.6491 13.7402L49.9089 27.4805H36.2402L49.9804 13.7402H63.6491ZM14.3151 13.7402L1.96289 26.0924V13.7402H14.3151ZM7.85156 29.4434H9.81445V31.4062H7.85156V29.4434ZM14.3151 33.3691L1.96289 45.7214V33.3691H14.3151ZM52.6849 47.1094L65.0371 34.7572V47.1094H52.6849ZM59.1484 31.4062H57.1855V29.4434H59.1484V31.4062Z\" fill=\"#272B2A\" />\n        <path d=\"M8.83301 9.81445C11.5389 9.81445 13.7402 7.61314 13.7402 4.90723C13.7402 2.20132 11.5389 0 8.83301 0C6.1271 0 3.92578 2.20132 3.92578 4.90723C3.92578 7.61314 6.1271 9.81445 8.83301 9.81445ZM8.83301 1.96289C10.4564 1.96289 11.7773 3.28365 11.7773 4.90723C11.7773 6.5308 10.4564 7.85156 8.83301 7.85156C7.20957 7.85156 5.88867 6.5308 5.88867 4.90723C5.88867 3.28365 7.20957 1.96289 8.83301 1.96289Z\" fill=\"#272B2A\" />\n        <path d=\"M58.167 9.81445C60.8729 9.81445 63.0742 7.61314 63.0742 4.90723C63.0742 2.20132 60.8729 0 58.167 0C55.4611 0 53.2598 2.20132 53.2598 4.90723C53.2598 7.61314 55.4611 9.81445 58.167 9.81445ZM58.167 1.96289C59.7904 1.96289 61.1113 3.28365 61.1113 4.90723C61.1113 6.5308 59.7904 7.85156 58.167 7.85156C56.5436 7.85156 55.2227 6.5308 55.2227 4.90723C55.2227 3.28365 56.5436 1.96289 58.167 1.96289Z\" fill=\"#272B2A\" />\n    </svg>\n\nconst Bell = () =>\n    <svg width=\"99\" height=\"54\" viewBox=\"0 0 99 54\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M71.3768 45.2529L67.5362 38.855C65.7657 35.9019 64.829 32.5219 64.829 29.077V23.4726C64.829 14.8459 57.8073 7.82422 49.1806 7.82422C40.5539 7.82422 33.5323 14.8459 33.5323 23.4726V29.077C33.5323 32.5219 32.5956 35.9019 30.8251 38.855L26.9845 45.2529C26.7766 45.5972 26.7721 46.0287 26.9688 46.3774C27.1678 46.7283 27.5411 46.9453 27.9435 46.9453H70.4176C70.82 46.9453 71.1934 46.7285 71.3923 46.3774C71.5891 46.0286 71.5847 45.5972 71.3768 45.2529ZM29.9175 44.7097L32.7409 40.004C34.7215 36.7044 35.7677 32.9265 35.7677 29.077V23.4726C35.7677 16.0754 41.7834 10.0597 49.1806 10.0597C56.5778 10.0597 62.5935 16.0754 62.5935 23.4726V29.077C62.5935 32.9265 63.6397 36.7044 65.6181 40.004L68.4437 44.7097H29.9175Z\" fill=\"#272B2A\" />\n        <path d=\"M49.1807 0C46.7149 0 44.7097 2.00523 44.7097 4.471V8.94201C44.7097 9.55889 45.2104 10.0597 45.8274 10.0597C46.4444 10.0597 46.9452 9.55889 46.9452 8.9419V4.471C46.9452 3.23702 47.9467 2.23555 49.1807 2.23555C50.4146 2.23555 51.4161 3.23702 51.4161 4.471V8.94201C51.4161 9.55889 51.9169 10.0597 52.5339 10.0597C53.1509 10.0597 53.6517 9.55889 53.6517 8.9419V4.471C53.6517 2.00523 51.6464 0 49.1807 0Z\" fill=\"#272B2A\" />\n        <path d=\"M54.0182 45.2618C53.703 44.7297 53.0211 44.5554 52.4869 44.8616C51.9526 45.1746 51.7738 45.8608 52.0867 46.3928C52.3773 46.8869 52.5361 47.4793 52.5361 48.0627C52.5361 49.9115 51.0316 51.416 49.1828 51.416C47.3341 51.416 45.8296 49.9115 45.8296 48.0627C45.8296 47.4793 45.9884 46.8869 46.2789 46.3928C46.5896 45.8585 46.4109 45.1745 45.8788 44.8616C45.34 44.5553 44.6604 44.7296 44.3475 45.2618C43.8534 46.1068 43.5919 47.0747 43.5919 48.0629C43.592 51.1455 46.0979 53.6515 49.1806 53.6515C52.2634 53.6515 54.7693 51.1455 54.7738 48.0629C54.7738 47.0747 54.5123 46.1068 54.0182 45.2618Z\" fill=\"#272B2A\" />\n        <path d=\"M9.22463 42.1547C9.064 42.1547 8.8919 42.1196 8.70833 42.0495C5.90881 40.9617 3.75181 39.3564 2.23732 37.2335C0.745773 35.1282 0 32.8299 0 30.3386C0 27.9175 0.757246 25.6806 2.27174 23.6279C3.80918 21.5576 5.96618 19.8909 8.74275 18.6277C8.90338 18.5575 9.064 18.5225 9.22463 18.5225C9.47705 18.5225 9.68357 18.6014 9.8442 18.7593C10.0278 18.8997 10.1196 19.0576 10.1196 19.233C10.1196 19.4786 9.98188 19.6804 9.70652 19.8383C7.32004 20.891 5.44988 22.3734 4.09601 24.2858C2.74215 26.1981 2.06522 28.2157 2.06522 30.3386C2.06522 32.4965 2.73067 34.5405 4.06159 36.4703C5.39251 38.4002 7.27415 39.8652 9.70652 40.8652C9.98188 40.9705 10.1196 41.1635 10.1196 41.4442C10.1196 41.6372 10.0392 41.8038 9.87862 41.9442C9.71799 42.0845 9.5 42.1547 9.22463 42.1547Z\" fill=\"#272B2A\" />\n        <path d=\"M22.0986 42.1547C21.938 42.1547 21.7659 42.1196 21.5823 42.0495C18.7828 40.9617 16.6258 39.3564 15.1113 37.2335C13.6198 35.1282 12.874 32.8299 12.874 30.3386C12.874 27.9175 13.6312 25.6806 15.1457 23.6279C16.6832 21.5576 18.8402 19.8909 21.6167 18.6277C21.7774 18.5575 21.938 18.5225 22.0986 18.5225C22.351 18.5225 22.5576 18.6014 22.7182 18.7593C22.9018 18.8997 22.9935 19.0576 22.9935 19.233C22.9935 19.4786 22.8559 19.6804 22.5805 19.8383C20.194 20.891 18.3239 22.3734 16.97 24.2858C15.6161 26.1981 14.9392 28.2157 14.9392 30.3386C14.9392 32.4965 15.6047 34.5405 16.9356 36.4703C18.2665 38.4002 20.1481 39.8652 22.5805 40.8652C22.8559 40.9705 22.9935 41.1635 22.9935 41.4442C22.9935 41.6372 22.9132 41.8038 22.7526 41.9442C22.592 42.0845 22.374 42.1547 22.0986 42.1547Z\" fill=\"#272B2A\" />\n        <path d=\"M89.7754 42.1547C89.936 42.1547 90.1081 42.1196 90.2917 42.0495C93.0912 40.9617 95.2482 39.3564 96.7627 37.2335C98.2542 35.1282 99 32.8299 99 30.3386C99 27.9175 98.2428 25.6806 96.7283 23.6279C95.1908 21.5576 93.0338 19.8909 90.2573 18.6277C90.0966 18.5575 89.936 18.5225 89.7754 18.5225C89.523 18.5225 89.3164 18.6014 89.1558 18.7593C88.9722 18.8997 88.8804 19.0576 88.8804 19.233C88.8804 19.4786 89.0181 19.6804 89.2935 19.8383C91.68 20.891 93.5501 22.3734 94.904 24.2858C96.2579 26.1981 96.9348 28.2157 96.9348 30.3386C96.9348 32.4965 96.2693 34.5405 94.9384 36.4703C93.6075 38.4002 91.7258 39.8652 89.2935 40.8652C89.0181 40.9705 88.8804 41.1635 88.8804 41.4442C88.8804 41.6372 88.9608 41.8038 89.1214 41.9442C89.282 42.0845 89.5 42.1547 89.7754 42.1547Z\" fill=\"#272B2A\" />\n        <path d=\"M76.9014 42.1547C77.062 42.1547 77.2341 42.1196 77.4177 42.0495C80.2172 40.9617 82.3742 39.3564 83.8887 37.2335C85.3802 35.1282 86.126 32.8299 86.126 30.3386C86.126 27.9175 85.3688 25.6806 83.8543 23.6279C82.3168 21.5576 80.1598 19.8909 77.3833 18.6277C77.2226 18.5575 77.062 18.5225 76.9014 18.5225C76.649 18.5225 76.4424 18.6014 76.2818 18.7593C76.0982 18.8997 76.0065 19.0576 76.0065 19.233C76.0065 19.4786 76.1441 19.6804 76.4195 19.8383C78.806 20.891 80.6761 22.3734 82.03 24.2858C83.3839 26.1981 84.0608 28.2157 84.0608 30.3386C84.0608 32.4965 83.3953 34.5405 82.0644 36.4703C80.7335 38.4002 78.8519 39.8652 76.4195 40.8652C76.1441 40.9705 76.0065 41.1635 76.0065 41.4442C76.0065 41.6372 76.0868 41.8038 76.2474 41.9442C76.408 42.0845 76.626 42.1547 76.9014 42.1547Z\" fill=\"#272B2A\" />\n    </svg>\n\nconst Clipboard = () =>\n    <svg width=\"60\" height=\"60\" viewBox=\"0 0 60 60\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M30.0346 8.65394C30.9904 8.65394 31.7653 7.87904 31.7653 6.92316C31.7653 5.96728 30.9904 5.19238 30.0346 5.19238C29.0787 5.19238 28.3038 5.96728 28.3038 6.92316C28.3038 7.87904 29.0787 8.65394 30.0346 8.65394Z\" fill=\"#272B2A\" />\n        <path d=\"M53.0769 13.8461C53.0769 11.2971 51.0106 9.23067 48.4616 9.23067H42.0543C41.1996 8.28119 40.1017 7.5547 38.8402 7.19181C37.7777 6.88633 36.9599 6.06854 36.6543 5.00599C35.8228 2.11501 33.1584 0 29.9999 0C26.8415 0 24.1772 2.11487 23.3459 5.0057C23.0398 6.06955 22.22 6.88633 21.1562 7.19297C19.8962 7.55614 18.7993 8.28192 17.9453 9.23067H11.5384C8.98923 9.23067 6.92297 11.2971 6.92297 13.8461V55.3846C6.92297 57.9336 8.98923 60 11.5384 60C22.1345 60 35.1574 60 48.4616 60C51.0108 60 53.077 57.9336 53.077 55.3846C53.077 42.277 53.0769 29.7255 53.0769 13.8461ZM18.4616 13.8089C18.4775 11.7801 19.8483 9.97144 21.7953 9.41038C23.6284 8.88221 25.0371 7.47393 25.5636 5.64363C26.1285 3.67934 27.9528 2.3077 29.9999 2.3077C32.0471 2.3077 33.8713 3.67934 34.4361 5.64378C34.9629 7.47523 36.3707 8.88307 38.2022 9.40966C40.1663 9.97462 41.5382 11.799 41.5382 13.8459V16.1536H18.4616V13.8089ZM48.4616 57.6923C36.1363 57.6923 23.8312 57.6923 11.5384 57.6923C10.2658 57.6923 9.23068 56.657 9.23068 55.3846V13.8461C9.23068 12.5737 10.2658 11.5384 11.5384 11.5384H16.5493C16.2998 12.244 16.1601 13.0013 16.1541 13.7908V18.4615H43.8462V13.8461C43.8462 13.0362 43.7032 12.2608 43.4476 11.5384H48.4616C49.7341 11.5384 50.7692 12.5737 50.7692 13.8461C50.7692 20.4437 50.7691 51.3829 50.7695 55.3846C50.7693 56.657 49.7342 57.6923 48.4616 57.6923Z\" fill=\"#272B2A\" />\n        <path d=\"M43.8462 25.3848H23.0768V27.6925H43.8462V25.3848Z\" fill=\"#272B2A\" />\n        <path d=\"M43.8462 32.3081H23.0768V34.6158H43.8462V32.3081Z\" fill=\"#272B2A\" />\n        <path d=\"M43.8462 39.231H23.0768V41.5387H43.8462V39.231Z\" fill=\"#272B2A\" />\n        <path d=\"M43.8462 46.1538H23.0768V48.4615H43.8462V46.1538Z\" fill=\"#272B2A\" />\n        <path d=\"M17.3076 27.6925C17.9449 27.6925 18.4615 27.1759 18.4615 26.5386C18.4615 25.9014 17.9449 25.3848 17.3076 25.3848C16.6703 25.3848 16.1537 25.9014 16.1537 26.5386C16.1537 27.1759 16.6703 27.6925 17.3076 27.6925Z\" fill=\"#272B2A\" />\n        <path d=\"M17.3076 34.6158C17.9449 34.6158 18.4615 34.0992 18.4615 33.462C18.4615 32.8247 17.9449 32.3081 17.3076 32.3081C16.6703 32.3081 16.1537 32.8247 16.1537 33.462C16.1537 34.0992 16.6703 34.6158 17.3076 34.6158Z\" fill=\"#272B2A\" />\n        <path d=\"M17.3076 41.5387C17.9449 41.5387 18.4615 41.0221 18.4615 40.3848C18.4615 39.7476 17.9449 39.231 17.3076 39.231C16.6703 39.231 16.1537 39.7476 16.1537 40.3848C16.1537 41.0221 16.6703 41.5387 17.3076 41.5387Z\" fill=\"#272B2A\" />\n        <path d=\"M17.3076 48.4615C17.9449 48.4615 18.4615 47.9449 18.4615 47.3077C18.4615 46.6704 17.9449 46.1538 17.3076 46.1538C16.6703 46.1538 16.1537 46.6704 16.1537 47.3077C16.1537 47.9449 16.6703 48.4615 17.3076 48.4615Z\" fill=\"#272B2A\" />\n    </svg>\n\nconst SpeechBubble = () =>\n    <svg width=\"54\" height=\"54\" viewBox=\"0 0 54 54\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M34.3332 29.316H9.11719C8.34439 29.316 7.71088 28.6825 7.71088 27.9097C7.71088 27.1369 8.34439 26.5034 9.11719 26.5034H34.3331C35.1059 26.5034 35.7394 27.1369 35.7394 27.9097C35.7395 28.6847 35.106 29.316 34.3332 29.316Z\" fill=\"#272B2A\" />\n        <path d=\"M34.3332 23.0353H9.11719C8.34439 23.0353 7.71088 22.4018 7.71088 21.629C7.71088 20.8562 8.34439 20.2227 9.11719 20.2227H34.3331C35.1059 20.2227 35.7394 20.8562 35.7394 21.629C35.7395 22.4018 35.106 23.0353 34.3332 23.0353Z\" fill=\"#272B2A\" />\n        <path d=\"M34.3332 16.1388H9.11719C8.34439 16.1388 7.71088 15.5053 7.71088 14.7325C7.71088 13.9597 8.34439 13.3262 9.11719 13.3262H34.3331C35.1059 13.3262 35.7394 13.9597 35.7394 14.7325C35.7395 15.5053 35.106 16.1388 34.3332 16.1388Z\" fill=\"#272B2A\" />\n        <path d=\"M9.8226 46.8277C8.50548 46.8277 7.43659 45.7611 7.43659 44.4483V38.7664C3.07824 37.5429 0 33.5634 0 28.9787V13.0562C0 7.44185 4.56734 2.87451 10.1795 2.87451H33.6365C39.2509 2.87451 43.816 7.44185 43.816 13.0562V28.9765C43.816 34.5909 39.2487 39.1582 33.6365 39.1582H19.1138L11.4182 46.2008C10.9785 46.6079 10.4103 46.8277 9.8226 46.8277ZM10.1795 5.05375C5.76676 5.05375 2.17689 8.64361 2.17689 13.0564V28.9766C2.17689 32.8211 4.93079 36.1237 8.72521 36.8312L9.61336 36.9966V44.4463C9.61336 44.64 9.82013 44.6488 9.82235 44.6488C9.86812 44.6488 9.90723 44.6314 9.94856 44.5966L18.269 36.9815H33.6385C38.0513 36.9815 41.6411 33.3916 41.6411 28.9767V13.0562C41.6411 8.64349 38.0513 5.05153 33.6385 5.05153H10.1795V5.05375Z\" fill=\"#272B2A\" />\n        <path d=\"M45.2399 9.47754C45.253 9.68221 45.3008 9.87591 45.3008 10.0849V11.6611C49.0061 12.3599 51.8209 15.6101 51.8209 19.5157V35.4381C51.8209 39.7703 48.3552 43.2905 44.0534 43.4189V43.4277H41.8764V48.7461C41.8764 48.9398 41.6696 48.9486 41.6674 48.9486C41.6217 48.9486 41.5825 48.9312 41.5412 48.8964L35.5676 43.4278L34.0284 43.4431H29.5786C27.0206 43.4431 24.7609 42.2262 23.3068 40.3496H20.7488C22.4773 43.4757 25.758 45.62 29.5808 45.62H34.7402L40.0738 50.5008C40.5135 50.9057 41.0818 51.1256 41.6695 51.1256C42.9866 51.1256 44.0555 50.0589 44.0555 48.7461V45.5938C49.5568 45.4654 54 40.9699 54 35.436V19.5155C53.9979 14.3866 50.1772 10.1763 45.2399 9.47754Z\" fill=\"#272B2A\" />\n    </svg>\n\nconst IdentifyIssues = ({ content }) => {\n    const { title, issues } = content;\n\n    const issuesSet = (issues || []).map(({ title, icon, body, prompt }, i) => (\n        <div key={\"insights-\" + i} className=\"sm:flex\">\n            <div className=\"sm:w-1/3 sm:mr-8 flex flex-col-reverse sm:flex-col pt-8 sm:pt-0\">\n                <h4 className=\"my-4 text-center\">{title}</h4>\n                <div className=\"sm:flex-auto flex justify-center items-center\">\n                    {icon === \"Barrier\" && <Barrier />}\n                    {icon === \"Bell\" && <Bell />}\n                    {icon === \"Clipboard\" && <Clipboard />}\n                    {icon === \"SpeechBubble\" && <SpeechBubble />}\n                </div>\n            </div>\n            <div className=\"sm:w-2/3\">\n                <p className=\"sm:my-4\">{body}</p>\n                <p className=\"my-4 font-bold\">{prompt}</p>\n            </div>\n        </div>\n    ))\n\n    return (\n        <div className={title ? \"mt-16 mb-8 sm:mx-auto sm:w-2/3\" : \"my-8\"}>\n            <h3 className=\"my-4\">{title}</h3>\n            <div className=\"my-4\">{issuesSet}</div>\n        </div>\n    )\n}\n\nconst ProcessionalGuide = ({ content }) => {\n    const { body, title } = content;\n    return (\n        <div className=\"mt-16 mb-8 sm:w-2/3 sm:mx-auto\">\n            {title && <h3 className=\"my-4\">{title}</h3>}\n\n            {body.map((paragraph, i) =>\n                <p className=\"my-4\" key={\"pg\" + i}>{paragraph}</p>\n            )}\n        </div>\n    );\n}\n\nconst Section = ({ section }) => {\n    const contents = section.contents.map((section, i) => {\n        const key = \"contents-\" + i;\n        switch (section.type) {\n            case \"Heading\":\n                return <Title key={key} content={section} />\n            case \"Introduction\":\n                return <Introduction key={key} content={section} />\n            case \"Changes\":\n                return <Changes key={key} content={section} />\n            case \"OrderedList\":\n                return <OrderedList key={key} content={section} />\n            case \"Lists\":\n                return <Lists key={key} content={section} />\n            case \"ImageExhibition\":\n                return <ImageExhibition key={key} content={section} />\n            case \"HorizontalImageExhibition\":\n                return <HorizontalImageExhibition key={key} content={section} />\n            case \"KeyInsights\":\n                return <KeyInsights key={key} content={section} />\n            case \"IdentifyIssues\":\n                return <IdentifyIssues key={key} content={section} />\n            case \"ProcessionalGuide\":\n                return <ProcessionalGuide key={key} content={section} />\n            default:\n                return <h1>missing section type</h1>\n        };\n    })\n    return <section>{contents}</section>;\n}\n\nexport const sectionFragment = graphql`\n    fragment Sections on ContentYaml {\n        sections {\n            id\n            contents {\n                type\n                title\n                body\n                items\n                lists {\n                    title\n                    items\n                }\n                rows {\n                    images {\n                        childImageSharp {\n                            fluid(maxWidth: 1280) {\n                                ...GatsbyImageSharpFluid\n                            }\n                            fixed(width: 200) {\n                                ...GatsbyImageSharpFixed\n                            }\n                        }\n                    }\n                }\n                changes {\n                    from\n                    to\n                }\n                summary\n                issues {\n                    title\n                    icon\n                    body\n                    prompt\n                }\n                insights {\n                    title\n                    body\n                }\n            }\n        }\n    }\n`\n\nexport default Section","import React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport Layout from './layout'\nimport SEO from './seo'\n\nimport Overview from './case_study/overview'\nimport Section from './case_study/section'\n\nexport const pageQuery = graphql`\n    query CaseStudy {\n        allContentYaml {\n            edges {\n                node {\n                    title\n                    next {\n                        path\n                        text\n                    }\n                    ...Overview\n                    ...Sections\n                }\n            }\n        }\n    }\n`\n\nconst CaseStudy = ({ data, pageContext }) => {\n    const caseStudy = data.allContentYaml.edges[pageContext.edge].node;\n    const sections = caseStudy.sections.map((section, i) =>\n        <Section key={\"section\" + i} section={section} />\n    )\n    return (\n        <Layout>\n            <SEO title={caseStudy.title} />\n            <Overview overview={caseStudy.overview} title={caseStudy.title} />\n            {sections}\n\n            <div className=\"flex justify-center\">\n                <Link to={\"/\" + caseStudy.next.path} className=\"text-btn py-1 px-3 my-8 border border-current text-pumpkin rounded inline-flex items-center justify-center\">\n                    <span>{caseStudy.next.text}</span>\n                    <svg className=\"w-2 h-3 ml-2\" viewBox=\"0 0 7 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path\n                            d=\"M5.82386e-05 10.7629L0.716129 11.5L6.37866 6.00018L0.71613 0.500001L5.90713e-05 1.23725L4.90306 6.00018L5.82386e-05 10.7629Z\"\n                            fill=\"#DF5F02\" />\n                    </svg>\n                </Link>\n            </div>\n\n        </Layout>\n    )\n}\n\nexport default CaseStudy;\n"],"sourceRoot":""}