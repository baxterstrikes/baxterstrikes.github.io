{"version":3,"sources":["webpack:///./src/components/case_study/overview.js","webpack:///./src/components/case_study/section.js","webpack:///./src/components/case-study.js"],"names":["AtAGlance","title","lis","items","map","item","i","className","key","ProblemStatement","problem","solution","Overview","overview","images","image","fixed","childImageSharp","areasOfFocus","importantDetails","Title","content","boldMatcher","MarkBolded","line","split","pre","b","post","Introduction","body","paragraph","OrderedList","ImageExhibition","summary","imageSet","reduce","set","push","fluid","KeyInsights","insightSet","insights","ProcessionalGuide","Section","contents","section","type","pageQuery","CaseStudy","data","pageContext","caseStudy","allContentYaml","edges","edge","node","sections"],"mappings":"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","file":"component---src-components-case-study-js-f697adeff25e443654fb.js","sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby'\nimport Img from 'gatsby-image'\n\nconst AtAGlance = ({ title, items }) => {\n    const lis = items.map((item, i) =>\n        <li\n            className=\"my-4 sm:mr-8\"\n            key={title + i}>\n            {item}\n        </li>\n    )\n    return (\n        <div>\n            <h4 className=\"sm:mt-4 mt-8 mb-4\">{title}</h4>\n            <ul>\n                {lis}\n            </ul>\n        </div>\n    )\n}\n\nconst ProblemStatement = ({ problem, solution }) =>\n    <>\n        <div className=\"mt-8 mb-4 text-B1 sm:w-2/3\">\n            <div className=\"inline font-bold\">Problem: </div>\n            <p className=\"inline\">{problem}</p>\n        </div>\n        <div className=\"mt-8 mb-4 text-B1 sm:w-2/3\">\n            <div className=\"inline font-bold\">Solution: </div>\n            <p className=\"inline\">{solution}</p>\n        </div>\n    </>\n\nconst Overview = ({ overview, title }) => {\n    const images = overview.image.map((image) =>\n        <div className=\"pr-5\"><Img fixed={image.childImageSharp.fixed} /></div>\n    )\n    return (\n        <>\n            <div className=\"mt-8 mb-4 flex flex-no-wrap w-full h-full overflow-x-scroll\">\n                {images}\n            </div>\n\n            <h1 className=\"my-4\">{title}</h1>\n\n            <div className=\"sm:flex\">\n                <AtAGlance\n                    title=\"Areas of Focus\"\n                    items={overview.areasOfFocus} />\n\n                <AtAGlance\n                    title=\"Important Details\"\n                    items={overview.importantDetails} />\n\n            </div>\n\n            <ProblemStatement\n                problem={overview.problem}\n                solution={overview.solution} />\n        </>\n    )\n}\n\nexport const overviewFragment = graphql`\n  fragment Overview on ContentYaml {\n    overview {\n        image {\n            childImageSharp {\n                fluid(maxWidth: 1280) {\n                    ...GatsbyImageSharpFluid\n                }\n                fixed(width: 200) {\n                    ...GatsbyImageSharpFixed\n                }\n            }\n        }\n        areasOfFocus\n        importantDetails\n        problem\n        solution\n      }\n  }\n`\n\nexport default Overview\n","import React from 'react'\nimport { graphql } from 'gatsby'\nimport Img from 'gatsby-image'\n\n\nconst Title = ({ content }) => (\n    <h2 className=\"mt-16 mb-8\">{content.title}</h2>\n)\n\nconst boldMatcher = /\\*\\*(.+)\\*\\*/gi;\n\nconst MarkBolded = ({ content }) =>\n    (content || []).map((line) => {\n        const [pre, b, post] = line.split(boldMatcher);\n        return (\n            <>\n                {pre}\n                <strong>{b}</strong>\n                {post}\n            </>\n        )\n    }\n    )\n\nconst Introduction = ({ content }) => {\n    const { body } = content;\n\n    return body.map((paragraph, i) =>\n        <p key={\"intros-\" + i} className=\"my-4 sm:w-2/3\">\n            <MarkBolded content={[paragraph]} />\n        </p>\n    );\n}\n\nconst OrderedList = ({ content }) => {\n    const items = content.items.map((item, i) =>\n        <li key={\"items-\" + i} className=\"ml-6 my-4 list-decimal sm:w-2/3\">{item}</li>\n    )\n\n    return (\n        <div className=\"my-8\">\n            <h4>{content.title}</h4>\n            <ol>{items}</ol>\n        </div>\n    )\n}\n\nconst ImageExhibition = ({ content }) => {\n    const { title, images, summary } = content;\n\n    var imageSet = (images || []).reduce((set, image, i) => {\n        set.push(\n            <Img key={\"images-\" + i} fluid={image.childImageSharp.fluid} />\n        )\n        return set\n    }, []);\n\n    return (\n        <div className=\"my-8\">\n            <h3 className=\"my-4\">{title}</h3>\n            <div className=\"my-4\">\n                {imageSet}\n            </div>\n            <p className=\"my-4 sm:w-2/3\">\n                <MarkBolded content={summary} />\n            </p>\n        </div>\n    )\n}\n\nconst KeyInsights = ({ content }) => {\n    const { title, insights } = content;\n\n    const insightSet = insights.map(({ title, body }, i) => (\n        <div key={\"insights-\" + i}>\n            <h4 className=\"my-4\">{title}</h4>\n            <p className=\"my-4 sm:w-2/3\">{body}</p>\n        </div>\n    ))\n\n    return (\n        <div className=\"my-8\">\n            <h3 className=\"my-4\">{title}</h3>\n            {insightSet}\n        </div>\n    )\n}\n\nconst ProcessionalGuide = ({ content }) => {\n    const { body } = content;\n    return body.map((paragraph, i) =>\n        <p className=\"my-16 sm:w-2/3\" key={\"pg\" + i}>{paragraph}</p>\n    );\n}\n\nconst Section = ({ section }) => {\n    const contents = section.contents.map((section, i) => {\n        const key = \"contents-\" + i;\n        switch (section.type) {\n            case \"Heading\":\n                return <Title key={key} content={section} />\n            case \"Introduction\":\n                return <Introduction key={key} content={section} />\n            case \"OrderedList\":\n                return <OrderedList key={key} content={section} />\n            case \"ImageExhibition\":\n                return <ImageExhibition key={key} content={section} />\n            case \"KeyInsights\":\n                return <KeyInsights key={key} content={section} />\n            case \"ProcessionalGuide\":\n                return <ProcessionalGuide key={key} content={section} />\n            default:\n                return <h1>missing section type</h1>\n        };\n    })\n    return <section>{contents}</section>;\n}\n\nexport const sectionFragment = graphql`\n    fragment Sections on ContentYaml {\n        sections {\n            id\n            contents {\n                type\n                title\n                body\n                items\n                images {\n                    childImageSharp {\n                        fluid(maxWidth: 1280) {\n                            ...GatsbyImageSharpFluid\n                        }\n                    }\n                }\n                summary\n                insights {\n                    title\n                    body\n                }\n            }\n        }\n    }\n`\n\nexport default Section","import React from 'react'\nimport { graphql } from 'gatsby'\n\nimport Layout from './layout'\nimport SEO from './seo'\n\nimport Overview from './case_study/overview'\nimport Section from './case_study/section'\n\nexport const pageQuery = graphql`\n    query CaseStudy {\n        allContentYaml {\n            edges {\n                node {\n                    title\n                    ...Overview\n                    ...Sections\n                }\n            }\n        }\n    }\n`\n\nconst CaseStudy = ({ data, pageContext }) => {\n    const caseStudy = data.allContentYaml.edges[pageContext.edge].node;\n    const sections = caseStudy.sections.map((section, i) =>\n        <Section key={\"section\" + i} section={section} />\n    )\n    return (\n        <Layout>\n            <SEO title={caseStudy.title} />\n            <Overview overview={caseStudy.overview} title={caseStudy.title} />\n            {sections}\n        </Layout>\n    )\n}\n\nexport default CaseStudy;\n"],"sourceRoot":""}